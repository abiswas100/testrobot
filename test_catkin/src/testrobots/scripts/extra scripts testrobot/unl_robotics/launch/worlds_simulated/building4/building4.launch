<?xml version="1.0" encoding="UTF-8"?>
<launch>
  
  <!-- Declare the world in which we want to start -->
  <arg name="world_name" default="$(find unl_smart_robotic_home)/worlds/empty.world"/>

  
  <!-- === Utilities === -->
  <arg name="rviz" default="true"/>
  <arg name="map_file_000" default="$(find unl_smart_robotic_home)/buildings/building4/maps/building4.yaml"/>

  
  <!-- === Spawn Gazebo === -->

  <!--Gazebo Variables--> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Set up the map server and relay node-->
  <node name="map_server_000" pkg="map_server" type="map_server" args="$(arg map_file_000)">
    <remap from="/map" to="/map_000" /> 
  </node>

  <node name="map_relay" pkg="topic_tools" type="relay"
        args="/map_000 /map">
  </node>

  <!-- The building is rooted in the world frame. Establish the relationship between the world and map frames -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="world_map_tf_broadcaster"
        args="0   0   0   0   0   0   world   map" />
  

  <!-- === Spawn the building4 "robot" ===-->
  <arg name="building4_name" value="building4_bot"/>           <!-- The model name for this robot -->
  <arg name="building4_namespace" value="building4_bot_ns"/>   <!-- Namespace used for this robot -->
  <group ns="$(arg building4_namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(find unl_smart_robotic_home)/urdf/buildings/building4/building4.xacro'
                    robot_name:=$(arg building4_name)
                    building4_namespace:=$(arg building4_namespace)" />
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param /$(arg building4_namespace)/robot_description -model $(arg building4_name)"
          respawn="false" output="screen" />

    <!-- Provide transform between the building4 robot frame and the real world frame -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg building4_name)_tf_broadcaster"
          args="0  0   0   0   0   0   world  $(arg building4_namespace)/building_footprint_link" />
  
    <!-- Start the robot state publisher for the building4 bot within the building4 namespace  -->
    <node name="robot_state_publisher"
          pkg="robot_state_publisher"
          type="robot_state_publisher"
	        respawn="false" output="screen"
          ns="$(arg building4_namespace)">
      <param name="tf_prefix" value="$(arg building4_namespace)" />
    </node>
    
    <!-- Add any controllers for the building, if applicable -->
  </group>

  
  <!-- === RViz support ===-->
  <group if="$(arg rviz)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find unl_smart_robotic_home)/rviz/$(arg building4_name).rviz"/>
  </group>
  
</launch>
