<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="world_name" default="$(find unl_smart_robotic_home)/worlds/hallway_world/hallway.world"/>

  <!-- Initial pose of the robot -->
  <arg name="initial_pose_x" default="2.0"/>
  <arg name="initial_pose_y" default="2.0"/>
  <arg name="initial_pose_a" default="0.0"/>

  
  <!-- === Utilities === -->
  <arg name="rviz" default="true"/>
  <arg name="yolo" default="true"/>
  <arg name="map_file_000" default="$(find unl_smart_robotic_home)/buildings/hallway/maps/hallway.yaml"/>

  
  <!-- === Spawn Gazebo === -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Set up the map server and relay node-->
  <node name="map_server_000" pkg="map_server" type="map_server" args="$(arg map_file_000)">
    <remap from="/map" to="/map_000" /> 
  </node>

  <node name="map_relay" pkg="topic_tools" type="relay"
        args="/map_000 /map">
  </node>
  
  <!-- The building is rooted in the world frame. Establish the relationship between the world and map frames -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="world_map_tf_broadcaster"
        args="0   0   0   0   0   0   world   map" />
  

  <!-- === Spawn the Hallway "robot" ===-->
  <arg name="hallway_name" value="hallway_bot"/>           <!-- The model name for this robot -->
  <arg name="hallway_namespace" value="hallway_bot_ns"/>   <!-- Namespace used for this robot -->
  <group ns="$(arg hallway_namespace)">
    <param name="robot_description"
           command="$(find xacro)/xacro --inorder '$(find unl_smart_robotic_home)/urdf/buildings/hallway/hallway.xacro'
                    robot_name:=$(arg hallway_name)
                    hallway_namespace:=$(arg hallway_namespace)" />
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
          args="-urdf -param /$(arg hallway_namespace)/robot_description -model $(arg hallway_name)"
          respawn="false" output="screen" />

    <!-- Provide transform between the Hallway robot frame and the real world frame -->
    <node pkg="tf2_ros" type="static_transform_publisher" name="$(arg hallway_name)_tf_broadcaster"
          args="0   0   0   0   0   0   world  $(arg hallway_namespace)/building_footprint_link" />
  
    <!-- Start the robot state publisher for the hallway bot within the hallway namespace  -->
    <node name="robot_state_publisher"
          pkg="robot_state_publisher"
          type="robot_state_publisher"
	        respawn="false" output="screen"
          ns="$(arg hallway_namespace)">
      <param name="tf_prefix" value="$(arg hallway_namespace)" />
    </node>
    
    <!-- Add any controllers for the building, if applicable -->
  </group>


  <!-- === Spawn the "robot" doors ===-->

  
  <!-- === Spawn the turtlebot robot === -->
  <include file="$(find unl_smart_robotic_home)/launch/robots/turtlebot.launch">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>

  
  <!-- === AMCL === -->
  <include file="$(find unl_smart_robotic_home)/launch/services/amcl.launch">
    <arg name="initial_pose_x" value="$(arg initial_pose_x)"/>
    <arg name="initial_pose_y" value="$(arg initial_pose_y)"/>
    <arg name="initial_pose_a" value="$(arg initial_pose_a)"/>
  </include>
  
  
  <!-- === RViz support ===-->
  <group if="$(arg rviz)">
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find unl_smart_robotic_home)/rviz/$(arg hallway_name).rviz"/>
  </group>

  
  <!-- === yolo support ===-->
  <!-- optionally set the camera topic for yolo to process -->
  <group if="$(arg yolo)">
    <include file="$(find unl_smart_robotic_home)/launch/services/embedded_yolo.launch" />
  </group>

</launch>
