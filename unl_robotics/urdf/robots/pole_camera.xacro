<?xml version="1.0"?>
<robot name="pole_camera" xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Properties for the pole -->
  <xacro:property name="pole_height" value="1" />
  <xacro:property name="pole_width" value="0.01" />
  <xacro:property name="pole_mass" value="0.5" />

  <!-- For the camera -->
  <xacro:include filename="$(find unl_smart_robotic_home)/urdf/robots/camera.plugins.xacro" />
  <xacro:property name="camera_size" value="0.05"/>
  <xacro:property name="camera_mass" value="0.05"/>
  <xacro:property name="camera_origin_x" value="0"/>
  <xacro:property name="camera_origin_y" value="0"/>
  <xacro:property name="camera_origin_z" value="${pole_height}"/>
  <xacro:property name="camera_x_offset" value="0.10"/>
  
  <!-- Add the pole -->
  <joint name="pole_joint" type="fixed">
    <parent link="plate_top_link"/>
    <child link="head_pole_link"/>
  </joint>
  
  <link name="head_pole_link">
    <collision>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <geometry>
    	  <box size="${pole_width} ${pole_width} ${pole_height}"/>
      </geometry>
    </collision>
    <visual>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <geometry>
	      <box size="${pole_width} ${pole_width} ${pole_height}"/>
      </geometry>
      <material name="orange"/>
    </visual>
    <inertial>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <mass value="${pole_mass}"/>
      <inertia
	        ixx="${pole_mass / 12.0 * (pole_width*pole_width   + pole_height*pole_height)}" ixy="0.0" ixz="0.0"
	        iyy="${pole_mass / 12.0 * (pole_height*pole_height + pole_width*pole_width)}"   iyz="0.0"
	        izz="${pole_mass / 12.0 * (pole_width*pole_width   + pole_width*pole_width)}"/>
    </inertial>
  </link>
  
  <!--Camera Mesh,  this is the Astra camera mesh visual representation, and
      also the geometry, mass, and inertial properties.  This node doesn't
      actual create a camera that broadcasts images. It's purely asethetic.  -->
  <joint name="head_camera_mesh_joint" type="fixed">
    <origin xyz="${camera_origin_x} ${camera_origin_y} ${camera_origin_z}" rpy="0 0 0"/>
    <parent link="head_pole_link"/>
    <child link="camera_mesh"/>
  </joint>

  <link name="camera_mesh">
    <visual>
      <origin xyz="0 0 0" rpy="${M_PI/2} 0 ${M_PI/2}"/>
      <geometry>
        <mesh filename="package://turtlebot_description/meshes/sensors/astra.dae"
              scale="1 1 1"/>
      </geometry>
    </visual>
    <collision>
      <origin xyz="0.0 0.0 0.0" rpy="0 0 0" />
      <geometry>
        <box size="0.0400 0.1650 0.0300"/>
      </geometry>
    </collision>
    <inertial>
      <mass value="0.564" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.003881243" ixy="0.0" ixz="0.0"
               iyy="0.000498940" iyz="0.0"
               izz="0.003879257" />
    </inertial>
  </link>

  <!--Camera - this is the Gazebo-based camera sensor used to publish images within ROS.

       Move the camera forward slightly (by camera_x_offset amount) so the Astra mesh
       used for Gazebo visualization doesn't interfere with the actual image.

       Also, assign this camera very small values for geometry and inertia, since they
       are added above along with the Astra mesh
  -->
  <joint name="head_camera_joint" type="fixed">
    <origin xyz="${camera_origin_x + camera_x_offset} ${camera_origin_y} ${camera_origin_z}" rpy="0 0 0"/>
    <parent link="head_pole_link"/>
    <child link="head_camera"/>
  </joint>

  <link name="head_camera">
    <visual>
      <origin xyz="0 0 0" rpy="${M_PI/2} 0 ${M_PI/2}"/>
      <geometry>
        <box size="0.0001 0.0001 0.0001" />
      </geometry>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0" />
      <geometry>
        <box size="0.0001 0.0001 0.0001" />
      </geometry>
    </collision>
    <inertial>
      <mass value="0.0001" />
      <origin xyz="0 0 0" />
      <inertia ixx="0.0001" ixy="0.0" ixz="0.0"
               iyy="0.0001" iyz="0.0"
               izz="0.0001" />
    </inertial>
  </link>
  
</robot>
